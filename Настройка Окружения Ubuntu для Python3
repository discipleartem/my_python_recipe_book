Настройка Окружения Ubuntu для Python3

=======================Sound=====================================================

0. Звук и его настройка

    sudo alsamixer

    sudo alsa force-reload


    amixer | grep mixer

    создать файл-скрипт:
    sudo gedit /home/$USER/turn_on_sound.sh

#!/bin/sh
sleep 10 && amixer -c 0 set Headphone 100% unmute && amixer -c 0 set 'Front Mic' 100% unmute && amixer -c 0 set 'Front Mic Boost' 40% && amixer -c 0 set 'Rear Mic' 100% unmute && amixer -c 0 set 'Rear Mic Boost' 40%

sudo chmod 755 /home/$USER/turn_on_sound.sh
=======================Sound=====================================================


=======================Google Chrome=====================================================
Проблемы с "key kering" ?
do this:
sudo apt-get --purge remove google-chrome-stable
rm -rf /home/$USER/.config/google-chrome
=======================Google Chrome=====================================================



=======================SUMLIMETEXT3=====================================================


1. Прежде всего я устанавливаю текстовый редактор кода Sublime3 (вы можете использовать vim, atom, или IDE PyCharm и т.д.)
    https://www.sublimetext.com/docs/3/linux_repositories.html

        !!! можно и через Ubuntu Software Center

    1) Install the GPG key:

        wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -

    2) Ensure apt is set up to work with https sources:

        sudo apt-get install apt-transport-https

    3) Select the channel to use:

        Stable

        echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list

    4) Update apt sources and install Sublime Text

        sudo apt-get update
        sudo apt-get install sublime-text


2. Настройка/устанеовка тем Sublime3


    с сублаймом все просто, тебе нужно установить пакетный менеджер в него, вот по это инстр.
    https://packagecontrol.io/installation

        Открываем консоль сублайма через Contrl + ~

        вставляем:

        import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)




    Потом перезаходим в редактор



    https://github.com/dempfi/ayu
    в Pference --> Package Control -> (или Contrl + Shift + P) Install Package  ayu



    Плагины для Sublime Text http://habrahabr.ru/post/235901/

        4) я ставлю следующие плагины:
            ( Pference --> Package Control -> (или Contrl + Shift + P) Install Package )


        Доп. фишки:

            emmet
            ("Ctrl + Shift + G" при выделении верхнего тега, который нам нужно обернуть позволяет это сделать в 10 раз быстрее)
            Сцуко tab в emmet НЕ работает. А Если забиндить tab то он не будет делать отступы при выделенном коде. Значит нужно забиндить на ctrl+1 в Preference --> key bindings --> user

[
{
    "keys": ["ctrl+0"],
    "command": "repl_open",
    "args":
    {
        "cmd": ["../venv/bin/python", "-u", "$file_basename"],
        "cwd": "$file_path",
        "encoding": "utf8",
        "extend_env":
        {
            "PYTHONIOENCODING": "utf-8"
        },
        "external_id": "python",
        "syntax": "Packages/Python/Python.tmLanguage",
        "type": "subprocess"
    }
},
{
    "keys": ["ctrl+1"],
    "args":
    {
        "action": "expand_abbreviation"
    },
    "command": "run_emmet_action",
    "context": [
    {
        "key": "emmet_action_enabled.expand_abbreviation"
    }],
},
{
    "keys": ["ctrl+2"],
    "command": "insert", "args": {"characters": "{%  %}"}
},
{
    "keys": ["ctrl+3"],
    "command": "insert", "args": {"characters": "{% block %}\n\n{% endblock %}"}
}]


            html5
            css3
            GitGutter (подсветка git)
            BracketHighlighter (для одновременного открытия/закрытия тегов и т.д.)
            AllAutocomplete (завершает текст)
            AutoFileName (Автозаполнение путей к подключаемым файлам)
            ColorPicker (Ctrl/Cmd + Shift + C вызывает програмку цвета)
            
            JAVASCRIPT & NODEJS SNIPPETS
            ADVANCED NEW FILE

            ApplySyntax — налету определяет синтаксис в текущем файле.

            #можно и Colorcoder (Разукрашивает все переменные, тем самым значительно упрощая ориентацию в коде. Особенно полезно для разработчиков с дислексией)





            LiveReload (автообновление страницы браузера при сохранении кода). После установки заходим Preferances --> Package Settings --> LiveReload --> Plugins --> Enable/disable plugins --> выбираем Simple reload



            и дописать в настройки:
            Preferances --> Package Settings --> LiveReload --> Settings default
                    {
                       "enabled_plugins": [
                           "SimpleReloadPlugin",
                           "SimpleRefresh"
                       ]
                    }

            и установить расширение для браузера (у меня Chrome) LiveReload и в настройках рашерения поставить галку на "Allow access to file URLs"

            !!! главное не забыть нажать на иконку плагина чтобы он начал работать
            должно работать

            ---------------------------------------------------------------------------
            Альтернатива Sublimу есть редактор Brackets c функцией автообновления страницы браузера
            (через .deb пакет у меня не устанавливалось)

            sudo add-apt-repository ppa:webupd8team/brackets
            sudo apt-get update
            sudo apt-get install brackets


=========================================================
Preferances --> Settings --> User


{
    "color_scheme": "Packages/ayu/ayu-dark.sublime-color-scheme",
    "font_size": 14,
    "ignored_packages":
    [
        "CSS",
        "Vintage"
    ],
    "theme": "ayu-dark.sublime-theme"
}

=========================================================


2.2. Макросы и Сниппеты https://www.youtube.com/watch?v=9PubkWkvl8Y

2.3. Дебаг (выявление и устранение ошибок) Sublime Text 3

     В консоле (ctrl + `)

        sublime.log_commands(True)
        sublime.log_input(True)

    После этого консоль выдает нам логи где вы можем видеть конфликт горячих клавишь и кто из плагинов переназначил их. Не забываем в конце прописать (False).


=======================/SUMLIMETEXT3=====================================================



=================================GIT=====================================================

5. Ставим git

=========================   GIT SCRIPT    ================================================
#!/bin/bash
# права на выполнение
# chmod a+x ./script_install_git.sh

sudo apt-get install -y git curl 
wait /
git config --global user.name "Your Name"
wait /
git config --global user.email "your.email@example.com"
wait /
git config --global core.autocrlf input
wait /


=========================   /GIT SCRIPT    ================================================

                #(curl на всякий случай)
        - sudo apt-get install git curl


        Если забыли команды - смотрим на сайте http://overapi.com/

        1) Настраиваем юзера гита:
            - git config --global user.name "Your Name"
            - git config --global user.email "your.email@example.com"

        Не забывайте менять юзера, когда работаете на другом компе и если комп общий

            - git config --global core.autocrlf input


            autocrlf true – git при каждом коммите будет преобразовывать CRLF в LF и наоборот при чтении из репозитория. Таким образом в репозитории будет православный LF а пользовательский редактор будет получит CRLF. Это сделано специально для Windows пользователей.

            autocrlf input – git при каждом коммите будет преобразовывать CRLF в LF, но при чтении из репозитория выдаст всё как есть в оригинале. Эта опция для тех, у кого редактор нормально воспринимает оба окончания строки, но хочет содержать репозиторий в едином формате. Эта опция рекомендуется для линуксоидов.


        2) создание SHH ключа:

            ssh-keygen -t rsa -C <твой_эмеил>  мигание консоли жмем "enter" 3 раза
            cat ~/.ssh/id_rsa.pub  - копируем то что выдало и на гитХаб ставим

        3) тест ssh
           -  ssh -T git@github.com

        4) файл .gitignore -прописываются исключения (папки, файлы), которые не добавляються в гит


/*

        например:

        /public/images
        /db

        # Игнорирование конфигурации bundler (ruby/rails)
        /.bundle

        # Игнорирование дефолтной базы данных SQLite.
        /db/*.sqlite3

        # Игнорирование всех логов и временных файлов.
        /log/*.log
        /tmp

*/
        5) Работаем с готовым репозиторием
             - git clone git@github.com:ник_на_гитХабе/название _репы.git - клонируем на локальный комп, и только потом работаем.

        либо создаем новый репозиторий:

            Идем в веб интерфейс -создаем новый репозиторий, придумываем имя (желательно чтобы совпадало с именем папки на компе)

            далее в консоле в папке проэкта

            git init

            git add “.” (без кавычек)

            git commit -m 'init commit' - можно в одинарных и двойных скобках

            git remote add origin git@github.com:<username>/first_app.git

            git push origin master

            ----------------------------------------------------------------
            !!! Если же вы решили создать README и/или добавить лицензю на гитхабе, то
            не забудьте выполнить такую последовательность работы с гитом:

           - переходим в папку проэкта
           - git init
           - git remote add origin git@github.com:ник_на_гитХабе/имя_приложения_созданого_на_ГитХабе_с_лицензией_и_РидМи.git
           - git pull origin master - копирует лицензю и README в локальную папку
           - продолжаем писать код и создавать файлы в локальной папке и коммитить на ГитХаб

=====================================================================================================================
    Полезные комманды Git :


        git clone git@github.com:ник_на_гитХабе/название _репы.git - клонируем на локальный комп, и только потом работаем.


        git init -        инициализация, создание НОВОГО гита


        git add “.” (без кавычек) -        добавление файла/папки в гит. “.” - означает вся текущая папка (в терминале пример ~/apps/demo_app1 добавиться в гит ВСЯ папка demo_app1 )
        (если не работает git add -A )


        git status           -  список всех файлов за которыми следит ГИТ


        git commit -m(мастер ветка) “описание комита, коментарий, версия на АНГ. ” -        добавление очередного сохранения версии в ГИТ (очередной комит)

        после первого коммита git remote add origin git@github.com:<git_login>/openportal.git


        При ошибке «fatal: remote origin already exists.» -
                        команда  git remote rm origin — удалит старый и потом
                        командой git remote add origin git@github.com:username/repo.git создаст новый  удаленный репозиторий.





        git branch testing - создание дополнительной ветки

        git checkout testing (master) - переключение на другую ветку


        или  git checkout -b testing - создание новой ветки (копирование той на которой ты сейчас) и сразу переключение на нее (на новую)





        git commit -m 'made a change'  "comit"  - комит в ветке


        git push origin  master (название_ветки) - пуш кода на ГитХаб ветки название_ветки


        git push -f origin название_ветки - принудительный пуш кода на ГитХаб ветки название_ветки



        git branch -d название_ветки - удаление ветки



        git rm -r --cached .    --- сброс гита для перезаливки репозитория
        (git add -- all
        git commit -m 'first commit')


        git checkout master
        git merge iss53         слияние ветки iss53 с master  (Nano Ctrl + O, Ctrl + X для выхода) можно разкомитить и сохранить коментарий


        при слиянии будет такая штука https://stackoverflow.com/questions/14095867/git-pull-cant-submit-merge-message
        https://stackoverflow.com/questions/14622690/got-a-git-merge-issue-after-git-pull



        git push - отправка всех изменений в ГитХаб


        git pull origin master - обновление ветки с ГитХаба


        git log -        хронология коммитов


=================================/GIT=====================================================


6. Ставим Python 3 на Ubuntu 16.04

    https://losst.ru/ustanovka-python-3-ubuntu

    https://www.python.org/downloads/

----------------------------Script_Begin--------------------------------------------------------------
#!/bin/bash
# права на выполнение
# chmod a+x ./script_install_python3.7.3.sh

#создаем виртуальное окружение в рабочей папке work

# sudo apt-get -y install python3-pip && pip3 install --upgrade pip && pip3 install virtualenv
# virtualenv --python=python3 venv
# source venv/bin/activate

# выполняем скрипт в рабочей папке work
# bash ./script_install_python3.7.3.sh


clear

sudo apt-get update
wait
sudo apt-get -y install gnome-tweaks git curl build-essential checkinstall libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev dpkg-dev
wait


#задержка на всякий случай ибо я не знаю есть ли ожидание системы, пока не выполнится предедущая команда
# а тут идет скачка архива с источника
wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz
wait


#задержка на всякий случай ибо я не знаю есть ли ожидание системы, пока не выполнится предедущая команда
# а тут идет уже распаковка архива с источника
tar xvf Python-3.7.3.tar.xz
wait


cd Python-3.7.3/

# задержка на всякий случай ибо я не знаю есть ли ожидание системы, пока не выполнится предедущая команда
# ДОЛГОЕ выполнение команды
./configure --enable-optimizations
wait

# задержка на всякий случай ибо я не знаю есть ли ожидание системы, пока не выполнится предедущая команда
# ДОЛГОЕ выполнение команды
sudo make -j 8
wait

# задержка на всякий случай ибо я не знаю есть ли ожидание системы, пока не выполнится предедущая команда
# ДОЛГОЕ выполнение команды
sudo make altinstall
wait

python --version
wait
python3 --version
wait
python3.7 --version
wait
python3.7
wait
exit()



echo ""
echo "INSTALLATION COMPLETED!"

sudo rm -r -f ./Python-3.7.3*

# ВСЕ
----------------------------Script_End--------------------------------------------------------------

    Пересоздав виртуальное окружение в рабочей папке с проектами у меня

        python --version
        python3 --version           наконецто версию 3.6.


==============================================================================================



как убрать автозагрузку / демона mysqld из Ubuntu 16.04

https://ru.stackoverflow.com/questions/946802/%D0%9A%D0%B0%D0%BA-%D1%83%D0%B4%D0%B0%D0%BB%D0%B8%D1%82%D1%8C-mysqld-%D0%B8%D0%B7-%D0%B0%D0%B2%D1%82%D0%BE%D0%B7%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B8-%D0%B2-%D1%84%D0%BE%D0%BD%D0%BE%D0%B2%D1%8B%D0%B5-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D1%8B-ubuntu-16-04

sudo systemctl disable mysql

=================================DOCKER=====================================================

#Установка

sudo apt update
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
sudo apt update
apt-cache policy docker-ce
sudo apt install docker-ce
sudo systemctl status docker

Использование команды Docker без sudo
sudo usermod -aG docker ${USER}
su - ${USER}
id -nG



#Настройки Докера


docker images
docker run -it <docker_login>/sudba-in-ua

docker run -it <docker_login>/sudba-in-ua /bin/bash

docker ps --all

docker stop <container_id>


#first
docker start <container_id>
#second
docker exec -it <container_id> /bin/bash

docker restart -it <container_id>

#remove all containers
docker container stop $(docker container ls -aq)
docker container rm $(docker container ls -aq)


#add new tag
docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
docker tag <user_login>/sudba-in-ua:latest <user_login>/sudba-in-ua:v_1

#commit container to image repository
docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

docker commit -p -m 'sms html form' e02081524b36 <user_login>/sudba-in-ua:v_1
docker push <user_login>/sudba-in-ua:v_1



#Запуск сервисов для работы сервера

#make autostart shell script
touch start.sh или nano start.sh

#################
#!/bin/sh
service ssh start
wait
service apache2 start
wait
service mysql start
wait
##################

#run script
bash ./start.sh


================================/DOCKER=====================================================
